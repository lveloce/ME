#include <AsgTools/MessageCheck.h>
#include <assert.h>
#include <cstdlib>

#ifndef ROOTCORE
#include "GaudiKernel/IJobOptionsSvc.h"
#endif


namespace asg
{
  namespace detail
  {
#ifdef ROOTCORE
    StatusCode makeToolRootCore (const std::string& type,
				 const std::string& name,
				 AsgTool*& tool);
#else
    StatusCode copyPropertiesInCatalogue( const std::string& fromTool, const std::string& toTool );
    StatusCode hasPropertiesInCatalogue( const std::string& toolName );
    StatusCode addPropertyToCatalogue( const std::string& toolName, const std::string& property, const std::string& val);
    StatusCode removePropertyFromCatalogue( const std::string& toolName, const std::string& property);
    StatusCode toolExists( const std::string& fullName, interfaceType_t*& tool );
    // StatusCode factoryExists( const std::string& type );
#endif
  }



  template <typename T>
  std::ostream& operator << (std::ostream& str, const AnaToolHandle<T>& obj)
  {
    return str << obj.getHandle();
  }



  template<class T> void AnaToolHandle<T> ::
  testInvariant () const
  {
#define CHECK_INVARIANT(x)			\
    if (!(x)) { std::cerr << __FILE__ << ":" << __LINE__ << ": invariant violated: " << #x << std::endl; std::abort(); }

    // General requirements
    CHECK_INVARIANT (&*this != nullptr);
    CHECK_INVARIANT (m_handle != nullptr);
#ifdef ROOTCORE
    CHECK_INVARIANT (m_toolOwn == nullptr || m_toolOwn.get() == m_toolPtr);
#else
    CHECK_INVARIANT (m_parent == m_handle->parent());
    CHECK_INVARIANT (m_releaseFunction);
#endif

    // State-dependent requirements
    switch (m_state)
    {
    case State::BEGIN:
      break;
    case State::PREINITIALIZED:
      CHECK_INVARIANT (m_toolPtr != nullptr);
      CHECK_INVARIANT (m_isUserConfigured == true);
      break;
    case State::CREATED:
#ifdef ROOTCORE
      CHECK_INVARIANT (m_toolPtr != nullptr);
      CHECK_INVARIANT (m_toolConfig != nullptr);
#endif
      CHECK_INVARIANT (m_isUserConfigured == false);
      break;
    case State::INITIALIZED:
      CHECK_INVARIANT (m_toolPtr != nullptr);
      break;
    case State::BAD_PROPERTY:
      CHECK_INVARIANT (m_toolPtr != nullptr);
      break;
    case State::BROKEN:
      break;
    }

#undef CHECK_INVARIANT
  }



  template<class T> AnaToolHandle<T> ::
  AnaToolHandle (const std::string& val_name, parentType_t *val_parent)
    : m_handle (new ToolHandle<T> (val_name, val_parent)),
      m_parent (val_parent),
      m_originalTypeAndName (m_handle->typeAndName ())
#ifndef ROOTCORE
    , m_releaseFunction ([] (ToolHandle<T> *m_handle) {
	using namespace msgToolHandle;
	//tool has 2 ref counts out of the box?? (ToolSvc and, and ToolSvc again because of the queryInterface call (line 348 of ToolSvc.cpp .. and see line 34 of AlgTool.cpp))
	if(m_handle->isSet()) {
	  //before deleting, check ToolSvc still knows about it, because it might already have been destroyed by ToolSvc finalize
	  interfaceType_t *tool = nullptr;
          if( !detail::toolExists( m_handle->parentName() + "." + m_handle->name(), tool ) ) return; //already deleted
	  ANA_MSG_DEBUG( *m_handle << " " << (*m_handle)->refCount() );
	  //if((*m_handle)->refCount()==3) (*m_handle)->release(); //may cause problem if the other 'something' wants to use the tool still??
	  //ANA_MSG_DEBUG (*m_handle << " " << (*m_handle)->refCount());
	  if((*m_handle)->refCount()==2) (*m_handle)->release(); //may cause problem if the other 'something' wants to use the tool still??
	  ANA_MSG_DEBUG (*m_handle << " " << (*m_handle)->refCount());
	  m_handle->release().ignore(); //triggers tool destruction
	}
      })
#endif
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
  }



  template<class T> AnaToolHandle<T> ::
  AnaToolHandle (AnaToolHandle<T>&& that) noexcept
    : m_state (that.m_state),
      m_handle (that.m_handle),
      m_parent (that.m_parent),
      m_originalTypeAndName (std::move (that.m_originalTypeAndName)),
      m_toolPtr (that.m_toolPtr),
      m_isUserConfigured (that.m_isUserConfigured),
#ifdef ROOTCORE
      m_toolConfig (that.m_toolConfig),
      m_toolOwn (std::move (that.m_toolOwn))
#else
      m_addedProperties (std::move (that.m_addedProperties)),
      m_releaseFunction (that.m_releaseFunction)
#endif
  {
    that.m_state = State::BROKEN;

#ifndef NDEBUG
    that.testInvariant ();
    testInvariant ();
#endif
  }



  template<class T> void AnaToolHandle<T> ::
  swap (AnaToolHandle<T>& that)
  {
#ifndef NDEBUG
    testInvariant ();
    that.testInvariant ();
#endif

    std::swap (m_state, that.m_state);
    m_handle.swap (that.m_handle);
    std::swap (m_parent, that.m_parent);
    m_originalTypeAndName.swap (that.m_originalTypeAndName);
    std::swap (m_toolPtr, that.m_toolPtr);
    std::swap (m_isUserConfigured, that.m_isUserConfigured);
#ifdef ROOTCORE
    std::swap (m_toolConfig, that.m_toolConfig);
    m_toolOwn.swap (that.m_toolOwn);
#else
    m_addedProperties.swap (that.m_addedProperties);
    m_releaseFunction.swap (that.m_releaseFunction);
#endif

#ifndef NDEBUG
    testInvariant ();
    that.testInvariant ();
#endif
  }



  template<class T> AnaToolHandle<T>& AnaToolHandle<T> ::
  operator = (AnaToolHandle<T>&& that)
  {
    // no invariant used
    swap (that);
    return *this;
  }



  template<class T> AnaToolHandle<T> ::
  ~AnaToolHandle ()
  {
    using namespace msgToolHandle;
#ifndef NDEBUG
    this->testInvariant ();
#endif

#ifndef ROOTCORE

    // if we caused properties to be set in the catalogue, we must
    // cleanup too
    for (auto& prop : m_addedProperties)
      detail::removePropertyFromCatalogue( fullName() , prop ).ignore();

    if (m_releaseFunction)
      m_releaseFunction (m_handle.get());

#endif
  }


  template<class T> bool
  AnaToolHandle<T> ::
  empty () const noexcept
  {
    //handle is empty if: it wasn't user configured and our type and name are not set, or it is user configured and the member handle is empty
    return( (  isUserConfigured() && ( m_handle->empty() || m_handle->typeAndName()=="PublicToolHandle('')" || m_handle->typeAndName()=="PrivateToolHandle('')" ) )
	    || ( (!isUserConfigured() && type()=="" && name()=="") ) );
  }



#ifdef ROOTCORE
   template<class T> inline const std::string&
   AnaToolHandle<T> ::
   type () const noexcept
   {
#ifndef NDEBUG
     this->testInvariant ();
#endif
     return m_handle->type();
   }

   template<class T> inline const std::string&
   AnaToolHandle<T> ::
   name () const noexcept
   {
#ifndef NDEBUG
     this->testInvariant ();
#endif
     return m_handle->name();
   }
#else
   template<class T> inline std::string
   AnaToolHandle<T> ::
   type () const
   {
#ifndef NDEBUG
     this->testInvariant ();
#endif
     return m_handle->type();
   }

   template<class T> inline std::string
   AnaToolHandle<T> ::
   name () const
   {
#ifndef NDEBUG
     this->testInvariant ();
#endif
     return m_handle->name();
   }
#endif



  template<class T> StatusCode
  AnaToolHandle<T> ::
  make (const std::string& val_type)
  {
    using namespace msgToolHandle;
#ifndef NDEBUG
    this->testInvariant ();
#endif

    ANA_CHECK (preMake (val_type));
    if (m_state != State::BEGIN)
    {
#ifndef NDEBUG
      this->testInvariant ();
#endif
      return StatusCode::SUCCESS;
    }
    return doMake ();
  }



  template <class T>
  StatusCode AnaToolHandle<T> ::
  make ()
  {
    using namespace msgToolHandle;
#ifndef NDEBUG
    this->testInvariant ();
#endif

    ANA_CHECK (preMake (""));
    if (m_state != State::BEGIN)
    {
#ifndef NDEBUG
      this->testInvariant ();
#endif
      return StatusCode::SUCCESS;
    }
    if (type().empty())
    {
      ANA_MSG_ERROR ("called AnaToolHandle::make() without a type");
      ANA_MSG_ERROR ("you can either pass it into make() directly,");
      ANA_MSG_ERROR ("or as part of the name to the constructor");
      ANA_MSG_ERROR ("(format type/name for the constructor)");
      return StatusCode::FAILURE;
    }

    return doMake ();
  }



  template <class T> template <class T2>
  StatusCode AnaToolHandle<T> ::
  setProperty (const std::string& property, const T2& value)
  {
    using namespace msgToolHandle;

#ifndef NDEBUG
    this->testInvariant ();
#endif
    ANA_CHECK (preSetProperty (property));
    if (m_state != State::CREATED && m_state != State::BAD_PROPERTY)
    {
#ifndef NDEBUG
      testInvariant ();
#endif
      return StatusCode::SUCCESS;
    }

#ifdef ROOTCORE

    // Call setProperty on our cached tool pointer
    if (m_toolConfig->setProperty (property, value).isFailure())
      m_state = State::BAD_PROPERTY;
#ifndef NDEBUG
    testInvariant ();
#endif
    return StatusCode::SUCCESS;

#else

    m_addedProperties.push_back(property); //this is so we clear out properties from catalogue when tool is destroyed

    //for athena we hand our property to the joboptions svc
    const std::string val = Gaudi::Utils::toString ( value ) ;
    return detail::addPropertyToCatalogue( fullName() , property, val );
#endif
  }



  template <class T> template <class T2>
  StatusCode AnaToolHandle<T> ::
  setProperty (const std::string& property, const ToolHandle<T2>& toolHandle)
  {
    using namespace msgToolHandle;
#ifndef NDEBUG
    this->testInvariant ();
#endif

    if (toolHandle.empty())
    {
      ANA_MSG_ERROR ("trying to initialize ToolHandle property " << property << " with empty handle");
#ifndef NDEBUG
      testInvariant ();
#endif
      return StatusCode::FAILURE;
    }

    ANA_CHECK (preSetProperty (property));
    if (m_state != State::CREATED && m_state != State::BAD_PROPERTY)
    {
#ifndef NDEBUG
      testInvariant ();
#endif
      return StatusCode::SUCCESS;
    }

#ifdef ROOTCORE

    // Call setProperty on our cached tool pointer
    if (m_toolConfig->setProperty (property, toolHandle).isFailure())
      m_state = State::BAD_PROPERTY;
#ifndef NDEBUG
    testInvariant ();
#endif
    return StatusCode::SUCCESS;

    /*
    // Call setProperty on our cached tool pointer.
    // This only works in RootCore because the tool pointer constructor
    // form doesn't exist in Athena.
    return m_toolConfig->setProperty (property, &*toolHandle);
    */

#else

    auto tool = toolHandle.get();

    //tool must already exist in the ToolSvc
    if(tool==nullptr) {
        ANA_MSG_ERROR("Tool " << toolHandle.typeAndName() << " must be initialized before you can pass it to another tool with setProperty");
        return StatusCode::FAILURE;
    }

    //strip the parent name
    std::string tool_name = toolHandle.name();
    if(tool_name.find(name()+".")==0) {
      //we also strip the name of our tool, if it appears at the front of tool_name ...
      //this is so private subtools can be set with code like:
      //ATH<> subtool("MyTool/ParentTool.SubTool");
      //ATH<> parenttool("MyTool2/ParentTool");
      //parenttool.setProperty("SubToolProperty",subtool);
      tool_name.replace(0,name().size()+1,"");
    } 

    return setProperty( property, tool->type() + "/" + tool_name );
#endif
  }



#ifndef ROOTCORE

template <class T> template <class T2>
  StatusCode AnaToolHandle<T> ::
  setProperty (const std::string& property, const ToolHandleArray<T2>& toolHandleArray)
  {
    using namespace msgToolHandle;
#ifndef NDEBUG
    this->testInvariant ();
#endif

    

    ANA_CHECK (preSetProperty (property));
    if (m_state != State::CREATED && m_state != State::BAD_PROPERTY)
    {
#ifndef NDEBUG
      testInvariant ();
#endif
      return StatusCode::SUCCESS;
    }

    std::vector<std::string> tools;
    //loop over toolhandles in array, strip off any parent naming and set property with the result
    for(auto& toolHandle : toolHandleArray) {
      if (toolHandle.empty())
      {
        ANA_MSG_ERROR ("trying to initialize ToolHandle property " << property << " with empty handle");
  #ifndef NDEBUG
        testInvariant ();
  #endif
        return StatusCode::FAILURE;
      }

       auto tool = toolHandle.get();
      if(tool == nullptr) {
        ANA_MSG_ERROR("Tool " << toolHandle.typeAndName() << " must be initialized before you can pass it to another tool with setProperty");
        return StatusCode::FAILURE;
      }
      
      //strip the parent name
      std::string tool_name = toolHandle.name();
      if(tool_name.find(name()+".")==0) {
        //we also strip the name of our tool, if it appears at the front of tool_name ...
        //this is so private subtools can be set with code like:
        //ATH<> subtool("MyTool/ParentTool.SubTool");
        //ATH<> parenttool("MyTool2/ParentTool");
        //parenttool.setProperty("SubToolProperty",subtool);
        tool_name.replace(0,name().size()+1,"");
      } 
      
      tools.push_back( tool->type() + "/" + tool_name );
      
    }

    return setProperty( property, tools );
  }

#endif


  template <class T> template <class T2>
  StatusCode AnaToolHandle<T> ::
  setProperty (const std::string& property, const AnaToolHandle<T2>& toolHandle)
  {
    using namespace msgToolHandle;
    // no invariant used

    if (!toolHandle.isInitialized())
    {
      ANA_MSG_ERROR ("need to pass initialized tool handle into setProperty");
      return StatusCode::FAILURE;
    }

#ifdef ROOTCORE
    return setProperty (property, ToolHandle<T2> (toolHandle.get()));
#else
    return setProperty (property, toolHandle.getHandle());
#endif
  }



  template<class T> StatusCode
  AnaToolHandle<T> ::
  initialize ()
  {
    using namespace msgToolHandle;

#ifndef NDEBUG
    this->testInvariant ();
#endif
    switch (m_state)
    {
    case State::BEGIN:
       // make the tool, this can cause our state to switch to
       // PREINITIALIZED, if the tool we are setup to make is actually
       // coming from user config or is shared
      ANA_CHECK (make());
      assert (m_state != State::BEGIN);
      return initialize ();
    case State::PREINITIALIZED:
      // we are using a tool that already has already been
      // initialized, so all we need to do is change state
      m_state = State::INITIALIZED;
#ifndef NDEBUG
      this->testInvariant ();
#endif
      return StatusCode::SUCCESS;
    case State::CREATED:
      // ok, tool created but not initialized, can initialize
      break;
    case State::INITIALIZED:
      ANA_MSG_ERROR ("tool " << *this << " has already been initialized");
      std::abort ();
    case State::BAD_PROPERTY:
      ANA_MSG_ERROR ("encountered error setting properties on " << *this << " refusing to initialize");
      m_state = State::BROKEN;
      return StatusCode::FAILURE;
    case State::BROKEN:
      ANA_MSG_ERROR ("tool handle " << *this << " in broken state");
      return StatusCode::FAILURE;
    }

    // first setting state to broken, so if we fail it stays broken
    m_state = State::BROKEN;


#ifdef ROOTCORE

    ANA_CHECK (m_toolPtr->initialize());

    if (m_parent == nullptr)
    {
      auto& pointer = sharedToolPointer ();
      assert (pointer.lock() == nullptr);
      pointer = m_toolOwn;
      assert (sharedToolPointer ().lock() == m_toolOwn);
    }

#else

    //in athena, before retrieving, we inspect the joboptionssvc for properties matching my property name, and copies those over
    ANA_CHECK( detail::copyPropertiesInCatalogue( m_handle->parentName() + "." + name() , fullName() ) );

    //just 'retrieve' the toolhandle .. if fails, then go broken
    ANA_CHECK (m_handle->retrieve());

    //must increment refcount on the tool (get two refcounts automatically, one for ToolSvc, and *i think* one for HistorySvc (yuck)
    //(*m_handle)->addRef();
    m_toolPtr = &**m_handle;

#endif

    m_state = State::INITIALIZED;
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return StatusCode::SUCCESS;
  }



  template<class T> StatusCode
  AnaToolHandle<T> ::
  retrieve ()
  {
    // no invariant used
    return initialize ();
  }


  template<class T> bool
  AnaToolHandle<T> ::
  isConfigurable () const
  {
    using namespace msgToolHandle;
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return // !empty() && 
#ifdef ROOTCORE
      // !(m_parent == nullptr && sharedToolPointer().lock() != nullptr) &&
      // !(m_parent == nullptr && !name().empty() && ToolStore::contains<T> (name())) &&
#endif
      !isUserConfigured ();
  }



  template<class T> bool
  AnaToolHandle<T> ::
  isInitialized () const noexcept
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return (m_state == State::INITIALIZED); 
  }



  template<class T> inline T *
  AnaToolHandle<T> ::
  operator -> () const noexcept
  {
    // no invariant used
    return get ();
  }



  template<class T> inline T&
  AnaToolHandle<T> ::
  operator * () const noexcept
  {
    // no invariant used
    return *get ();
  }



  template<class T> inline T*
  AnaToolHandle<T> ::
  get () const noexcept
  {
    using namespace msgToolHandle;

#ifndef NDEBUG
    this->testInvariant ();
#endif
    switch (m_state)
    {
    case State::BEGIN:
    case State::PREINITIALIZED:
    case State::CREATED:
    case State::BAD_PROPERTY:
      ANA_MSG_FATAL ("can't call get on handle " << *this << " without initialized tool");
      std::abort();
    case State::INITIALIZED:
      break;
    case State::BROKEN:
      ANA_MSG_FATAL ("can't call get on handle " << *this << " which is in a broken state");
      std::abort();
    }
    return m_toolPtr;
  }



  template <class T> template<typename T2> void
  AnaToolHandle<T> ::
  declarePropertyFor (T2 *tool, const std::string& name,
		      const std::string& description)
  {
    using namespace msgToolHandle;
#ifndef NDEBUG
    this->testInvariant ();
#endif
    switch (m_state)
    {
    case State::BEGIN:
      break;
    case State::PREINITIALIZED:
    case State::CREATED:
    case State::INITIALIZED:
    case State::BAD_PROPERTY:
    case State::BROKEN:
      ANA_MSG_FATAL ("can't declare tool handle " << *this << " as property " << name << " after tool has been instantiated");
      std::abort ();
    }

    if (m_parent != nullptr && m_parent != tool)
    {
      ANA_MSG_FATAL ("can't declare tool handle " << *this << " as property for tool " << tool->name() << " as it has a different parent tool " << m_parent->name());
      std::abort ();
    }
    ANA_CHECK_THROW (tool->declareProperty (name, *m_handle, description));
  }



  template <class T> bool
  AnaToolHandle<T> ::
  inPremakeState () const noexcept
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
    switch (m_state)
    {
    case State::BEGIN:
      return true;
    case State::PREINITIALIZED:
    case State::CREATED:
    case State::INITIALIZED:
    case State::BAD_PROPERTY:
    case State::BROKEN:
      return false;
    }
   return false; //compiler dummy
  }



  template <class T> bool
  AnaToolHandle<T> ::
  inBrokenState () const noexcept
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
    switch (m_state)
    {
    case State::BROKEN:
      return true;
    case State::BEGIN:
    case State::PREINITIALIZED:
    case State::CREATED:
    case State::INITIALIZED:
    case State::BAD_PROPERTY:
      return false;
    }
      return false; //compiler dummy
  }



  template <class T> const ToolHandle<T>&
  AnaToolHandle<T> ::
  getHandle () const noexcept
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return *m_handle;
  }



  template <class T> ToolHandle<T>&
  AnaToolHandle<T> ::
  handle ()
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return *m_handle;
  }



#ifdef ROOTCORE
  template <class T> template <class T2> StatusCode
  AnaToolHandle<T> ::
  makeNew (std::string val_type)
  {
    using namespace msgToolHandle;

    ANA_CHECK (preMake (val_type));
    if (m_state != State::BEGIN)
    {
#ifndef NDEBUG
      this->testInvariant ();
#endif
      return StatusCode::SUCCESS;
    }

    // Create the tool
    std::string toolName;
    if (m_parent != nullptr)
      toolName = m_parent->name() + "." + name();
    else
      toolName = name();
    std::unique_ptr<T2> tool (new T2 (toolName));
    m_toolConfig = tool.get();
    m_toolOwn = std::move (tool);
    m_toolPtr = m_toolOwn.get();

    // Inherit verbosity from parent
    if (m_parent != nullptr)
      m_toolConfig->msg().setLevel( m_parent->msg().level() );

    setType (std::move (val_type));
    m_state = State::CREATED;
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return StatusCode::SUCCESS;
  }
#endif



  template <class T> bool
  AnaToolHandle<T> ::
  isUserConfigured () const noexcept
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif

    // we should have cached the value of \ref isUserConfigured in
    // \ref make, so we shouldn't try again to check it, as the
    // actions in \ref make may actually change the result of \ref
    // isUserConfigured
    if (m_state != State::BEGIN)
      return m_isUserConfigured;

    if (m_handle->isSet())
      return true;

    if (m_handle->typeAndName() != m_originalTypeAndName)
      return true;

#ifdef ROOTCORE
    if (m_parent != nullptr)
    {
      if (m_handle->parentName() != m_parent->name())
	return true;
    } else
    {
      if (m_handle->parentName() != "ToolSvc")
	return true;
      if (!name().empty())
      {
	if (ToolStore::contains<T> (name()))
	  return true;
	if (sharedToolPointer().lock() != nullptr)
	  return true;
      }
    }
#endif

#ifndef ROOTCORE
    //for athena, all we do here is check if the tool already exists
    interfaceType_t *tool = nullptr;
    if( detail::toolExists( fullName(), tool ) )
      return true;

    if (detail::hasPropertiesInCatalogue (fullName()))
      return true;
#endif

    return false;
    /*

    if (m_handle == nullptr)
      return false;
#ifdef ROOTCORE
    return !m_handle->empty();
#else
   //here we exploit quirk that users who set our handle from another handle
   // will get a typeName with the words 'PublicToolHandle' or 'PrivateToolHandle' 
   // at the start of the typeAndName, so we can detect it that way
    if ( 
      (strncmp(m_handle->typeAndName().c_str(), "PublicToolHandle", strlen("PublicToolHandle")) == 0) ||
      (strncmp(m_handle->typeAndName().c_str(), "PrivateToolHandle", strlen("PrivateToolHandle")) == 0)
      ) return true;
    //must also check the joboptions service for properties 
    ServiceHandle<IJobOptionsSvc> svc("JobOptionsSvc","AnaToolHandle");
    if( svc.retrieve().isFailure() ) return false;
    if( svc->getProperties(m_handle->parentName() + "." + m_handle->name()) ) return true;
    svc.release().ignore();
    return false;


#endif
    */
  }


  template <class T> StatusCode
  AnaToolHandle<T> ::
  preSetProperty (const std::string& property)
  {
    using namespace msgToolHandle;

#ifndef NDEBUG
    this->testInvariant ();
#endif
    switch (m_state)
    {
    case State::BEGIN:
      ANA_CHECK (make());
      return preSetProperty (property);
    case State::PREINITIALIZED:
      // we are using a tool that already has all its properties set
      // and initialized, so we are not doing that again
      ANA_MSG_INFO ("Ignoring setProperty for " << *this << "." << property << " - tool preInitialized");
      return StatusCode::SUCCESS;
    case State::CREATED:
    case State::BAD_PROPERTY:
      // ok, tool created but not initialized, can set properties
      return StatusCode::SUCCESS;
    case State::INITIALIZED:
      ANA_MSG_FATAL ("tool " << *this << " has already been initialized");
      std::abort ();
    case State::BROKEN:
      ANA_MSG_ERROR ("tool handle " << *this << " in broken state");
      return StatusCode::FAILURE;
    }
    return StatusCode::FAILURE; //compiler dummy
  }



  template <class T> StatusCode
  AnaToolHandle<T> ::
  preMake (const std::string& val_type)
  {
    using namespace msgToolHandle;

#ifndef NDEBUG
    this->testInvariant ();
#endif

    switch (m_state)
    {
    case State::BEGIN:
      break;
    case State::PREINITIALIZED:
    case State::CREATED:
    case State::INITIALIZED:
    case State::BAD_PROPERTY:
      ANA_MSG_FATAL ("tool " << *this << " has already been made, can't call make again");
      std::abort ();
    case State::BROKEN:
      ANA_MSG_ERROR ("tool handle " << *this << " in broken state");
      return StatusCode::FAILURE;
    }

#ifdef ROOTCORE
    // this ensures that in RootCore we can share public tools when
    // requested with the same name
    if (m_parent == nullptr && m_handle->isSet() == false &&
	!name().empty())
    {
      m_isUserConfigured = true;
      m_toolOwn = sharedToolPointer().lock();
      m_toolPtr = m_toolOwn.get();
      if (m_toolPtr != nullptr)
      {
        // this is right: PREINITIALIZED means that we rely on a tool
        // that has already been initialized by somebody else (another
        // ToolHandle in this case).
    	m_state = State::PREINITIALIZED;
#ifndef NDEBUG
    	this->testInvariant ();
#endif
    	return StatusCode::SUCCESS;
      }
    }
#endif

    if ((m_isUserConfigured = isUserConfigured()))
    {
      m_state = State::BROKEN;
      try
      {
	m_toolPtr = &**m_handle;
	if (m_toolPtr == nullptr)
	{
	  ANA_MSG_ERROR ("failed to retrieve tool from tool handle " << *m_handle);
	  return StatusCode::FAILURE;
	}
      } catch (std::exception& e)
      {
	ANA_MSG_ERROR ("encountered exception during tool retrieval (" <<
		       *m_handle << "): " << e.what());
	return StatusCode::FAILURE;
      }
      m_state = State::PREINITIALIZED;
#ifndef NDEBUG
      testInvariant ();
#endif
      return StatusCode::SUCCESS;
    }

    if (!val_type.empty())
    {
      if (val_type.find ('/') != std::string::npos)
	setTypeAndName (val_type);
      else
	setType (val_type);
    }

    if (type().empty())
    {
      ANA_MSG_ERROR ("no type specified for ToolHandle");
      return StatusCode::FAILURE;
    }

    if (name().empty())
    {
      ANA_MSG_ERROR ("no name specified for ToolHandle");
      return StatusCode::FAILURE;
    }

    return StatusCode::SUCCESS;

    /*
#ifndef ROOTCORE
      //check form of typeAndName ... if it is "PublicToolHandle('AAA/BBB')" then we need to parse it
      std::string mytype = m_handle->typeAndName();
      if(strncmp(mytype.c_str(), "PublicToolHandle(", strlen("PublicToolHandle(")) == 0) {
         mytype.replace(0,18,""); mytype.replace(strlen(mytype.c_str())-2,2,""); 
	 /// \todo check against original implementation
	 *m_handle = ToolHandle<T>(mytype, 0); //turn our handle public!
      } else if(strncmp(mytype.c_str(), "PrivateToolHandle(", strlen("PrivateToolHandle(")) == 0) {
         mytype.replace(0,19,""); mytype.replace(strlen(mytype.c_str())-2,2,""); 
	 /// \todo check against original implementation
	 *m_handle = ToolHandle<T>(mytype, m_parent);
      } else if(strncmp(mytype.c_str(), "PublicToolHandleHack(", strlen("PublicToolHandleHack(")) == 0) { //hack case for when setPropertyToolHandle has been used
         mytype.replace(0,22,""); mytype.replace(strlen(mytype.c_str())-2,2,""); 
         ///we don't replace the toolhandle because we need the original 'hacked' toolhandle
      }
#endif

#ifndef ROOTCORE
  //for athena, all we do here is check if the tool already exists, marking it preinitialized if so
interfaceType_t* tool(0);
if( detail::toolExists( fullName(), tool ) ) {
//verify the tool is correct type
if(tool->type() != m_handle->type()) {
ANA_MSG_FATAL(" Tool of type " << tool->type() << " called " << tool->name() << " already exists. Cannot create tool with same name of type " << m_handle->type());
#ifndef NDEBUG
this->testInvariant ();
#endif
return StatusCode::FAILURE;
}
m_state = State::PREINITIALIZED;
m_toolPtr = &*m_handle;
}
#endif

    */
  }



#ifdef ROOTCORE
  template<class T> inline std::weak_ptr<T>& AnaToolHandle<T> ::
  sharedToolPointer () const
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
    assert (!name().empty());
    static std::map<std::string,std::weak_ptr<T>> toolMap;
    return toolMap[name()];
  }
#endif



#ifndef ROOTCORE
  template<class T> std::string
  AnaToolHandle<T> ::
  fullName () const
  {
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return m_handle->parentName() + "." + name();
  }
#endif



  template<class T> StatusCode
  AnaToolHandle<T> ::
  doMake ()
  {
    using namespace msgToolHandle;

#ifdef ROOTCORE

    // Call the Athena helper function to invoke the tool factory.
    AsgTool *toolPtr = nullptr;

    std::string toolName;
    if (m_parent != nullptr)
      toolName = m_parent->name() + "." + name();
    else
      toolName = name();

    try
    {
      ANA_CHECK (detail::makeToolRootCore (type(), toolName, toolPtr));
    } catch (std::exception& e)
    {
      ANA_MSG_ERROR ("encountered exception during tool creation(" <<
		     type() << "," << name() << "): " << e.what());
      m_state = State::BROKEN;
#ifndef NDEBUG
      this->testInvariant ();
#endif
      return StatusCode::FAILURE;
    }
    if (toolPtr == nullptr)
    {
      ANA_MSG_FATAL ("failed to allocate tool: " + type());
      m_state = State::BROKEN;
#ifndef NDEBUG
      this->testInvariant ();
#endif
      return StatusCode::FAILURE;
    }

    // Try to cast to the requested interface
    m_toolOwn.reset (dynamic_cast<T*>(toolPtr));
    m_toolPtr = m_toolOwn.get();
    if (m_toolPtr == nullptr)
    {
      assert (toolPtr != nullptr);
      delete toolPtr;
      ANA_MSG_ERROR ("failed to cast tool of type " + type() + " to requested interface");
      m_state = State::BROKEN;
#ifndef NDEBUG
      this->testInvariant ();
#endif
      return StatusCode::FAILURE;
    }

    m_toolConfig = toolPtr;

    // Inherit verbosity from parent ... in athena this is done by passing the parent in the factory method
    if (m_parent != nullptr)
      m_toolConfig->msg().setLevel( m_parent->msg().level() );

#else

    //tool doesn't exist, we should also check that we have the factory available for this type
    // ANA_CHECK (detail::factoryExists( m_handle->type() ));
#endif

    m_state = State::CREATED;
#ifndef NDEBUG
    this->testInvariant ();
#endif
    return StatusCode::SUCCESS;
  }
}
