// $Id$
/**
 * @file AthContainers/tools/AuxTypeVectorFactory.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date May, 2014
 * @brief Factory objects that creates vectors using @c AuxTypeVector.
 */


namespace SG {


/**
 * @brief Create a vector object of this type.
 * @param size Initial size of the new vector.
 * @param capacity Initial capacity of the new vector.
 */
template <class T>
IAuxTypeVector*
AuxTypeVectorFactory<T>::create (size_t size, size_t capacity) const
{
  return new AuxTypeVector<T> (size, capacity);
}


/**
 * @brief Copy an element between vectors.
 * @param dst Pointer to the start of the destination vector's data.
 * @param dst_index Index of destination element in the vector.
 * @param src Pointer to the start of the source vector's data.
 * @param src_index Index of source element in the vector.
 *
 * @c dst and @ src can be either the same or different.
 */
template <class T>
void AuxTypeVectorFactory<T>::copy (void* dst,        size_t dst_index,
                                    const void* src,  size_t src_index) const
{
  return AuxTypeVector<T>::copy (dst, dst_index, src, src_index);
}


/**
 * @brief Swap an element between vectors.
 * @param a Pointer to the start of the first vector's data.
 * @param aindex Index of the element in the first vector.
 * @param b Pointer to the start of the second vector's data.
 * @param bindex Index of the element in the second vector.
 *
 * @c a and @ b can be either the same or different.
 */
template <class T>
void AuxTypeVectorFactory<T>::swap (void* a, size_t aindex,
                                    void* b, size_t bindex) const
{
  return AuxTypeVector<T>::swap (a, aindex, b, bindex);
}


/**
 * @brief Clear an element within a vector (static method).
 * @param dst Pointer to the start of the vector's data.
 * @param dst_index Index of the element in the vector.
 */
template <class T>
void AuxTypeVectorFactory<T>::clear (void* dst, size_t dst_index) const
{
  return AuxTypeVector<T>::clear (dst, dst_index);
}


/**
 * @brief Return the size of an element of this vector type.
 */
template <class T>
size_t AuxTypeVectorFactory<T>::getEltSize() const
{
  return sizeof (typename AuxTypeVector<T>::vector_type::value_type);
}


/**
 * @brief Return the @c type_info of the vector.
 */
template <class T>
const std::type_info* AuxTypeVectorFactory<T>::tiVec() const
{
  return &typeid (typename AuxTypeVector<T>::vector_type);
}


/**
 * @brief True if the vectors created by this factory work by dynamic
 *        emulation (via @c TVirtualCollectionProxy or similar); false
 *        if the std::vector code is used directly.
 */
template <class T>
bool AuxTypeVectorFactory<T>::isDynamic() const 
{
  return false;
}


} // namespace SG
