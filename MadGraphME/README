# Contact: Karolos Potamianos <karolos.potamianos@cern.ch>
# Date: 2013-VI-10

This package provides a unified interface to including MadGraph ME standalone 
CPP code into your analysis. The only input required is the lepton 4-vectors
and a set of MEs generated by MadGraph (H->ZZ->4l and pp->4l provided).
*** Warning: this package is just a wrapper to MadGraph ME. In particular, you
need to ensure that the ordering of 4-vectors corresponds to what MadGraph
expects. In doubt, check the header file corresponding to the MadGraph process.

********************************************************************************
* Compiling the package
********************************************************************************
To compile, run the usual command:

rc compile_pkg MadGraphME

It will generate the files under inc/ and lib/. If buidling for external usage,
these two folders are all you'll need, along with the parameter cards under 
Cards/param_card_*.dat

********************************************************************************
* Using the package
********************************************************************************

A utility has been created to test the package: testMadGraphME.cxx

********************************************************************************
* Importing your own MadGraph processes
********************************************************************************

At the MadGraph prompt, run, e.g.,

generate p p > l+ l- l+ l-
output standalone_cpp PROC_SA_CPP_sm_pp_4l

Please make sure to use the prefix 'PROC_SA_CPP_'.
To import: ./scripts/importMadGraphStandaloneCpp.sh PATH_TO_PROC_SA_CPP_FOLDER

*** Note: don't forget to check the parameter card, e.g., for proper Higgs mass

The package has the following assumptions:
* MG ME code resides (with the default MG stucture as of MG5 v1.5.8) under 
folders starting with PROC_SA_CPP_*
* When dealing with models (cf. Parameters_MODEL.h and Parameters_MODEL.cc), 
only one instance of each MODEL is built
--> If you need multiple parameters sets for the same model, change its name

********************************************************************************
* Package folder structure and contents
********************************************************************************

|-- Cards					: directory with parameter cards
|-- MadGraphME -> inc				: Symbolic link for RootCore
|-- Root -> src					: Symbolic link for RootCore
|-- cmt						: Contains the Makefile.RootCore
|-- inc						: headers for using the libs
|-- StandAlone					: RootCore compiled libraries
|-- scripts					: Script to import MG processes
|-- src						: MG processes and support code
`-- util					: directory with example code

* inc/ComputeMGME.h contains a templated code which will provide the matrix
elements from the MG package. There are two flavors of the function:

*** Note: your inputs should be in GeV
*** Note: your lepton 4-vectors should be already in the center-of-mass system
	--> Usage example:
	// Assuming std::vector<TLorentzVector> leptons(4);
	TLorentzVector cms; for(int i = 0 ; i < 4 ; ++i) cms += leptons[i];
	for(int i = 0 ; i < 4 ; ++i) leptons[i].Boost( -( cms.BoostVector() ) );
	ComputeMGME(S_sm, leptons, cms);

template <typename CPPProcessT>
std::vector<float> ComputeMGME(
  CPPProcessT &S_sm, 	// MG CPPProcess to compute the ME from
  const std::vector<TLorentzVector>& leptons,  // lepton 4-vec (CMS frame)
  const TLorentzVector& cms	// CMS vector
);

// The version below will use the value of cms.M() as the value of mH
// Currently, this is only possible for PROC_SA_CPP_heft_pp_H_ZZ_4l (signal)

template <typename CPPProcessT>
std::vector<float> ComputeMGME_cmsM4l(
  CPPProcessT &S_sm, 	// MG CPPProcess to compute the ME from
  const std::vector<TLorentzVector>& leptons,  // lepton 4-vec (CMS frame)
  const TLorentzVector& cms	// CMS vector
);
